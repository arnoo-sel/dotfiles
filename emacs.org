#+TITLE: Arnoo's Emacs Config
#+AUTHOR: arnoo-sel
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#system-setup][SYSTEM SETUP]]
  - [[#org-babel-languages][Org-Babel Languages]]
  - [[#required-system-packages][Required System Packages]]
  - [[#additional-setup][Additional Setup]]
  - [[#emacs-configuration-setup][Emacs Configuration Setup]]
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#straightel-package-manager][Straight.el Package Manager]]
  - [[#org][Org]]
  - [[#general-keybindings][General Keybindings]]
  - [[#helm][Helm]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#bell][BELL]]
- [[#company][COMPANY]]
- [[#dashboard][DASHBOARD]]
- [[#diminish][DIMINISH]]
- [[#flycheck][FLYCHECK]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncate-lines][Display Line Numbers and Truncate Lines]]
- [[#language-support][LANGUAGE SUPPORT]]
  - [[#cmake][CMake]]
- [[#lsp][LSP]]
- [[#magit][MAGIT]]
- [[#multiple-cursors][MULTIPLE CURSORS]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
  - [[#hide-markers][Hide Markers]]
- [[#powerline][POWERLINE]]
- [[#projectile][PROJECTILE]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#reload-emacs][RELOAD EMACS]]
- [[#tab-bar][TAB BAR]]
- [[#treemacs][TREEMACS]]
  - [[#treemacs-projectile][Treemacs-projectile]]
  - [[#treemacs-icons-dired][Treemacs-icons-dired]]
  - [[#treemacs-magit][Treemacs-magit]]
- [[#vterm][VTERM]]
- [[#which_key][WHICH_KEY]]
- [[#programs-to-load-last][PROGRAMS TO LOAD LAST]]
  - [[#ef-themes][Ef-Themes]]

* SYSTEM SETUP

To run only once.

** Org-Babel Languages

Execute the following code block ("~C-c C-c~") to allow ~org-babel~ to execute shell scripts.

#+begin_src emacs-lisp :tangle no :results output silent
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)))
#+end_src

** Required System Packages

Execute ("~C-c C-c~") the following code blocks once at system setup.

*** OpenSUSE-Tumbleweed

#+begin_src bash :tangle no :eval no-export :results output silent :dir /sudo::~
  # required for cmake lsp-mode support
  sudo zypper install -y python311-pipx
  pipx cmake-language-server

  # fonts
  sudo zypper install -y inter-fonts inter-variable-fonts
  sudo zypper install -y adobe-sourcecodepro-fonts

  # required for vterm
  sudo zypper install -y libtool

  # required for powerline
  sudo zypper install -y powerline-fonts
#+end_src

WSL extras:

#+begin_src bash :tangle no :eval no-export :results output silent
  sudo zypper install -t pattern wsl_gui
#+end_src

*** Ubuntu 22.04

#+begin_src bash :tangle no :eval no-export :results output silent
  # required for cmake lsp-mode support
  sudo apt install pipx
  pipx cmake-language-server

  # fonts
  sudo apt install fonts-inter fonts-inter-variable
  # todo: sourcecodepro install
#+end_src

** Additional Setup

#+begin_src emacs-lisp :tangle no :eval no-export :results output silent
  (all-the-icons-install-fonts)
#+end_src

** Emacs Configuration Setup

Execute ("~C-c C-c~") the following code block once at system setup.

#+begin_src bash :tangle no :eval no-export :results output silent :var filename=(buffer-file-name)
  rm -f ~/.emacs

  # Create emacs configuration folder
  mkdir -p ~/.emacs.d

  # Prevent loading of the default package manager
  echo '(setq package-enable-at-startup nil)' > mkdir ~/.emacs.d/early-init.el

  # Copy this file to the emacs configuration folder
  cp "$filename" ~/.emacs.d/config.org

  # Setup the emacs configuration to use the copy of this file
  echo '(org-babel-load-file (expand-file-name "config.org" user-emacs-directory))' > ~/.emacs.d/init.el
#+end_src

Then close this emacs session, and open a new one.
If all goes well, it load this configuration!

* IMPORTANT PROGRAMS TO LOAD FIRST

** Straight.el Package Manager

- Website  :: [[https://github.com/radian-software/straight.el]]
- Requires :: the default pachage manager (~package.el~) not to be loaded. This is taken care of in [[*Emacs Configuration Setup]].

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name
	  "straight/repos/straight.el/bootstrap.el"
	  (or (bound-and-true-p straight-base-dir)
	      user-emacs-directory)))
	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** Org

Making sure ~straight.el~ always uses the built-in ~org-mode~ and does not try to fetch a remote version of it when a package depends on ~org-mode~.

#+begin_src emacs-lisp
  (use-package org :straight (:type built-in))
#+end_src

** General Keybindings

- Website :: [[https://github.com/noctuid/general.el]]

Load ~general.el~ and define the global key bindings.

#+begin_src emacs-lisp
  (use-package general
    :straight t
    :config
    (general-define-key "M-x"              'helm-M-x)
    (general-define-key "C-x C-f"          'helm-find-files)
    (general-define-key "C-c c r"          '(reload-init-file              :wk "Reload emacs config"))
    (general-define-key "<f8>"             '(treemacs                      :wk "Toggle treemacs"))
    (general-define-key "<f7>"             '(projectile-find-other-file    :wk "Switch file"))
    (general-define-key "C-x b"            '(helm-mini                     :wk "Switch buffer"))
    (general-define-key "C-c c s"          '(set-rectangular-region-anchor :wk "Start rectangular selection"))
    (general-define-key "M-<down-mouse-1>" nil)
    (general-define-key "M-<mouse-1>"      '(mc/add-cursor-on-click        :wk "Add a cursor"))
    (general-define-key "<f9>"             'vterm-toggle))
#+end_src

** Helm

- Website :: [[https://emacs-helm.github.io/helm/]]

#+begin_src emacs-lisp
  (use-package helm
    :straight t
    :init (helm-mode 1))
#+end_src

- Website :: [[https://github.com/brotzeit/helm-xref]]

#+begin_src emacs-lisp
  (use-package helm-xref :straight t)
#+end_src

- Website :: [[https://github.com/emacs-helm/helm-org]]

#+begin_src emacs-lisp
  (use-package helm-org :straight t)
  (add-to-list 'helm-completing-read-handlers-alist '(org-capture . helm-org-completing-read-tags))
  (add-to-list 'helm-completing-read-handlers-alist '(org-set-tags . helm-org-completing-read-tags))
#+end_src

* ALL THE ICONS

- Website :: [[https://github.com/domtronn/all-the-icons.el]]

#+begin_src emacs-lisp
  (use-package all-the-icons
    :straight t
    :ensure t
    :if (display-graphic-p))
#+end_src

- Website :: [[https://github.com/jtbm37/all-the-icons-dired]]

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :straight t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* BELL

Enables default visible bell. Turns off the audible beep.

#+begin_src emacs-lisp
  (setq visible-bell 1)
#+end_src

* COMPANY

- Website :: https://company-mode.github.io

*Auto-completion.*

The /company-backends/ variable defines which completion backends are enabled.

- /capf/    :: bridge to /capf/, the standard auto-completion in emacs. Many modes (such as /lsp-mode/) will use it
- /dabbrev/ :: the standard "M-/" completion in emacs

#+begin_src emacs-lisp
  (use-package company
    :straight t
    :config
    (setq company-backends '((company-capf company-dabbrev-code company-keywords company-files company-dabbrev)))
    (setq company-idle-delay 0.1)
    (setq company-minimum-prefix-length 2)
    :init
    (global-company-mode 1))
#+end_src

* DASHBOARD

#+begin_src emacs-lisp
  (use-package dashboard
    :straight t
    :ensure t 
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Escape-Meta-Alt-Control-Shift")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 10)
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
    :config
    (dashboard-setup-startup-hook))
#+end_src

* DIMINISH

Hide select minor mode from the mode-line.

Adding ~:diminish~ to a ~use-package~ call hides the loaded minor mode from the mode-line.

#+begin_src emacs-lisp
  (use-package diminish :straight t)
#+end_src

* FLYCHECK

#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :defer t
    :diminish
    :init
    (global-flycheck-mode 1))
#+end_src

* FONTS

** Setting the Font Face

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "SourceCodePro"
    :height 110
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Inter"
    :height 110
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "SourceCodePro"
    :height 110
    :weight 'medium)

  (add-to-list 'default-frame-alist '(font . "SourceCodePro-11"))

  ;;(setq-default line-spacing 0.12)
#+end_src

* GRAPHICAL USER INTERFACE TWEAKS

** Disable Menubar, Toolbars and Scrollbars

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncate Lines

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (set-default 'truncate-lines t)
#+end_src

* LANGUAGE SUPPORT

** CMake

#+begin_src emacs-lisp
  (use-package cmake-mode
    :straight t
    :mode (("/CMakeLists\\.txt\\'" . cmake-mode)
           ("\\.cmake\\'" . cmake-mode)))
#+end_src

* LSP

#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook ((c++-mode . lsp)
           (cmake-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :straight t
    :commands lsp-ui-mode)
  
  (use-package helm-lsp
    :straight t
    :commands helm-lsp-workspace-symbol)

  (use-package lsp-treemacs
    :straight t
    :commands lsp-treemacs-errors-list)

  (use-package dap-mode
    :straight t)

  (with-eval-after-load 'lsp-mode
    (require 'dap-cpptools))

  (add-to-list 'load-path (expand-file-name "lib/lsp-mode" user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "lib/lsp-mode/clients" user-emacs-directory))
#+end_src

* MAGIT

#+begin_src emacs-lisp
  (use-package magit :straight t)
#+end_src

* MULTIPLE CURSORS

#+begin_src emacs-lisp
  (use-package multiple-cursors :straight t)
#+end_src

* ORG MODE

** Enabling Table of Contents

#+begin_src emacs-lisp
  (use-package toc-org
    :straight t
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets :straight t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Electric Indent

#+begin_src emacs-lisp
  ;;(electric-indent-mode -1)
  ;;(add-hook 'after-change-major-mode-hook (lambda() (electric-indent-mode -1)))
#+end_src

** Source Code Block Tag Expansion

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Hide Markers

Hide the markers.

#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src

*Dynamically* _show_ the /markers/ when ~needed~.

#+begin_src emacs-lisp
  (use-package org-appear
    :straight t
    :hook (org-mode . org-appear-mode))
#+end_src

* POWERLINE

#+begin_src emacs-lisp
 (use-package powerline :straight t)
 (powerline-default-theme)
#+end_src

* PROJECTILE

#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :config
    (projectile-mode 1))
#+end_src

* RAINBOW MODE

#+begin_src emacs-lisp
  (use-package rainbow-mode
    :straight t
    :diminish
    :hook 
    ((org-mode prog-mode) . rainbow-mode))
#+end_src

* RELOAD EMACS

#+begin_src emacs-lisp
  (defun reload-init-file ()
    (interactive)
    (load-file user-init-file)
    (load-file user-init-file))
#+end_src

* TAB BAR

#+begin_src emacs-lisp
  (tab-bar-mode 1)
  (setq tab-bar-close-button-show nil)
  (setq tab-bar-new-tab-choice "*dashboard*")

  (defun my-tab-bar-tab-name-function ()
    (concat "  " (tab-bar-tab-name-current)))
  (setq tab-bar-tab-name-function 'my-tab-bar-tab-name-function)
#+end_src

* TREEMACS

#+begin_src emacs-lisp
  (use-package treemacs
    :straight t
    :ensure t
    :defer t)
#+end_src

** Treemacs-projectile

#+begin_src emacs-lisp
  (use-package treemacs-projectile
    :straight t
    :after (treemacs projectile)
    :ensure t)
#+end_src

** Treemacs-icons-dired

#+begin_src emacs-lisp
  (use-package treemacs-icons-dired
    :straight t
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)
#+end_src

** Treemacs-magit

#+begin_src emacs-lisp
  (use-package treemacs-magit
    :straight t
    :after (treemacs magit)
    :ensure t)
#+end_src

* VTERM

#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package vterm-toggle
    :straight t
    :after vterm)
#+end_src

We need to unbind ~<f9>~ from the ~vterm-mode~ map so it is not captured by ~vterm~.

#+begin_src emacs-lisp
  (general-define-key
   :keymaps 'vterm-mode-map
   "<f9>" nil
   [(control return)] #'(vterm-toggle-insert-cd :wk "cd to emacs cwd"))

  (setq vterm-toggle-fullscreen-p nil)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 (reusable-frames . visible)
                 (window-height . 0.3)))
#+end_src

* WHICH_KEY

#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :init
    (which-key-mode 1)
    :diminish)
#+end_src

* PROGRAMS TO LOAD LAST

** Ef-Themes

#+begin_src emacs-lisp
  (use-package ef-themes :straight t)
  (setq ef-themes-headings 
        '((0 variable-pitch bold 1)
          (1 variable-pitch bold 1)
          (2 variable-pitch bold 1)
          (3 variable-pitch bold 1)
          (4 variable-pitch bold 1)
          (5 variable-pitch bold 1)
          (6 variable-pitch bold 1)
          (7 variable-pitch bold 1)
          (t variable-pitch bold 1)))
  (setq ef-themes-mixed-fonts t
        ef-themes-variable-pitch-ui t)
  (mapc #'disable-theme custom-enabled-themes)
#+end_src

Customize theme for the tab-bar.

#+begin_src emacs-lisp
  (defun my-ef-themes-mode-line ()
    "Tweak the style of the mode lines."
    (ef-themes-with-colors
      (custom-set-faces
       `(tab-bar ((,c :background ,bg-alt :foreground ,fg-main :box (:line-width 2 :color ,bg-alt))))
       `(tab-bar-tab ((,c :background ,bg-main :foreground ,fg-main :box (:line-width 2 :color ,bg-main))))
       `(tab-bar-tab-inactive ((,c :background: ,bg-active :box(:line-width 2 :color ,bg-active)))))))
  (add-hook 'ef-themes-post-load-hook #'my-ef-themes-mode-line)
#+end_src

Load the theme.

#+begin_src emacs-lisp
  (ef-themes-select 'ef-elea-dark)
#+end_src
